// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model user {
  id              Int                @id @default(autoincrement())
  name            String
  email           String             @unique
  is_active       Boolean?           @default(true)
  partner         Boolean?           @default(false)
  is_user         Boolean?           @default(false)
  is_visitor      Boolean?
  password        String
  department      user_departments[]
  position_id     Int?
  position        position?          @relation(fields: [position_id], references: [id])
  user_info       user_info?
  department_head department[]
  created_at      DateTime           @default(now())
  updated_at      DateTime?
  access_level_id Int?
  access          access_level?      @relation(fields: [access_level_id], references: [id])
  assets          assets[]
  asset_history   asset_history[]
}

model user_info {
  id             Int       @id @default(autoincrement())
  user_id        Int       @unique
  user           user      @relation(fields: [user_id], references: [id])
  title          String?
  name           String
  date_of_birth  DateTime?
  gender         String
  primary_number String?
  other_number   String?
  email          String?
  address        String?
  country        String?
  occupation     String?
  company        String?
  member_since   DateTime?
  photo          String?
}

model department {
  id                   Int                @id @default(autoincrement())
  name                 String
  department_head      Int?
  department_head_info user?              @relation(fields: [department_head], references: [id])
  description          String?
  user_departments     user_departments[]
  position             position[]
  created_by           Int
  created_at           DateTime           @default(now())
  updated_by           Int?
  updated_at           DateTime?
}

model user_departments {
  id              Int         @id @default(autoincrement())
  user_id         Int
  user            user        @relation(fields: [user_id], references: [id])
  department_id   Int?
  department_info department? @relation(fields: [department_id], references: [id])
}

model position {
  id            Int         @id @default(autoincrement())
  name          String
  department_id Int?
  department    department? @relation(fields: [department_id], references: [id])
  description   String?
  user          user[]
  created_by    Int
  created_at    DateTime    @default(now())
  updated_by    Int?
  updated_at    DateTime?
}

model access_level {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  description    String?
  permissions    Json
  created_by     Int?
  updated_by     Int?
  deleted_at     DateTime?
  deleted        Boolean   @default(false)
  created_at     DateTime? @default(now())
  updated_at     DateTime?
  users_assigned user[]
}

// Asset managment

enum asset_status {
  ASSIGNED
  UNASSIGNED
  BROKEN
  IN_MAINTENANCE
}

model assets {
  id               Int             @id @default(autoincrement())
  name             String
  asset_code       String?         @unique
  category         asset_category? @relation(fields: [asset_categoryId], references: [id])
  asset_categoryId Int?
  assigned_to      user?           @relation(fields: [userId], references: [id])
  userId           Int?
  date_assigned    DateTime?
  date_purchased   DateTime?
  price            Float?
  description      String?
  updated_at       DateTime        @default(now())
  status           asset_status
}

model asset_category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  assets      assets[]
}

model asset_history {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  status_update asset_status
  related_user  user?        @relation(fields: [userId], references: [id])
  update_date   DateTime
  userId        Int?
}
