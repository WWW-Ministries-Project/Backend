// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model user {
  id               Int                @id @default(autoincrement())
  name             String
  email            String?            @unique
  is_active        Boolean?           @default(true)
  partner          Boolean?           @default(false)
  is_user          Boolean?           @default(false)
  password         String?
  department       user_departments[]
  position_id      Int?
  position         position?          @relation(fields: [position_id], references: [id])
  user_info        user_info?
  department_head  department[]
  created_at       DateTime           @default(now())
  updated_at       DateTime?
  access_level_id  Int?
  access           access_level?      @relation(fields: [access_level_id], references: [id])
  event_attendance event_attendance[]
  membership_type  membership_type?
  asset_history    asset_history[]
  request          request[]
}

model user_info {
  id                   Int                     @id @default(autoincrement())
  user_id              Int                     @unique
  user                 user                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  title                String?
  first_name           String?
  last_name            String?
  other_name           String?
  date_of_birth        DateTime?
  gender               String
  marital_status       marital_status?
  nationality          String?
  country_code         String?
  primary_number       String?
  other_number         String?
  email                String?
  address              String?
  country              String?
  occupation           String?
  company              String?
  member_since         DateTime?
  photo                String?
  work_info_id         Int?
  work_info            user_work_info?         @relation(fields: [work_info_id], references: [id])
  emergency_contact_id Int?
  emergency_contact    user_emergency_contact? @relation(fields: [emergency_contact_id], references: [id])
}

model user_work_info {
  id                  Int         @id @default(autoincrement())
  name_of_institution String
  industry            String
  position            String
  user_info           user_info[]
}

model user_emergency_contact {
  id           Int         @id @default(autoincrement())
  name         String
  relation     String
  phone_number String
  user_info    user_info[]
}

model department {
  id                   Int                @id @default(autoincrement())
  name                 String
  department_head      Int?
  department_head_info user?              @relation(fields: [department_head], references: [id], onDelete: SetNull)
  description          String?
  user_departments     user_departments[]
  position             position[]
  created_by           Int
  created_at           DateTime           @default(now())
  updated_by           Int?
  updated_at           DateTime?
  assets               assets[]
}

model user_departments {
  id              Int         @id @default(autoincrement())
  user_id         Int         @unique
  user            user        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  department_id   Int?
  department_info department? @relation(fields: [department_id], references: [id])
}

model position {
  id            Int         @id @default(autoincrement())
  name          String
  department_id Int?
  department    department? @relation(fields: [department_id], references: [id])
  description   String?
  user          user[]
  created_by    Int
  created_at    DateTime    @default(now())
  updated_by    Int?
  updated_at    DateTime?
}

model access_level {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  description    String?
  permissions    Json
  created_by     Int?
  updated_by     Int?
  deleted_at     DateTime?
  deleted        Boolean   @default(false)
  created_at     DateTime? @default(now())
  updated_at     DateTime?
  users_assigned user[]
}

// Asset managment
model assets {
  id                  Int           @id @default(autoincrement())
  name                String
  assigned_to         department?   @relation(fields: [department_assigned], references: [id], onDelete: SetNull)
  department_assigned Int?
  date_assigned       DateTime?
  date_purchased      DateTime?
  price               Float?
  photo               String?
  description         String?
  created_by          Int?
  created_at          DateTime      @default(now())
  updated_by          Int?
  updated_at          DateTime?
  status              asset_status?
}

model asset_history {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  status_update asset_status
  related_user  user?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  update_date   DateTime
  userId        Int?
}

model event_mgt {
  id               Int                @id @default(autoincrement())
  name             String
  start_date       DateTime?
  end_date         DateTime?
  start_time       String?
  end_time         String?
  event_type       event_type?
  event_status     event_status?
  location         String?
  description      String?
  poster           String?
  qr_code          String?
  created_by       Int
  created_at       DateTime           @default(now())
  updated_by       Int?
  updated_at       DateTime?
  event_attendance event_attendance[]
}

model event_attendance {
  id         Int       @id @default(autoincrement())
  event_id   Int
  event      event_mgt @relation(fields: [event_id], references: [id])
  user_id    Int
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime  @default(now())
}

// Request

model request {
  id                      Int                   @id @default(autoincrement())
  request_id              String
  user_id                 Int
  event_id                Int
  department_id           Int
  request_approval_status RequestApprovalStatus
  requisition_date        DateTime
  comment                 String
  products                requested_item[]      @relation("ProductRequest")
  attachmentsList         request_attachment[]
  user                    user?                 @relation(fields: [user_id], references: [id])
}

model request_attachment {
  id         Int      @id @default(autoincrement())
  URL        String
  request    request? @relation(fields: [request_id], references: [id])
  request_id Int?

  @@map("attachment")
}

model requested_item {
  id         Int    @id @default(autoincrement())
  request_id Int
  name       String
  unitPrice  Float

  request request @relation("ProductRequest", fields: [request_id], references: [id])

  @@map("requested_product_item")
}

enum RequestApprovalStatus {
  Draft
  Awaiting_HOD_Approval
  APPROVED
  REJECTED
}

// Enums
enum asset_status {
  ASSIGNED
  UNASSIGNED
  BROKEN
  IN_MAINTENANCE
}

enum marital_status {
  SINGLE
  MARRIED
  DIVORCED
  WIDOW
  WIDOWER
}

enum membership_type {
  MEMBER
  VISITOR
}

enum event_type {
  ACTIVITY
  PROGRAM
  SERVICE
  OTHER
}

enum event_status {
  CONFIRMED
  TENTATIVE
}
