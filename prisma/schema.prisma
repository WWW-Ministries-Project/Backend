generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model user {
  id                    Int                 @id @default(autoincrement())
  name                  String
  email                 String?             @unique
  is_active             Boolean?            @default(true)
  partner               Boolean?            @default(false)
  is_user               Boolean?            @default(false)
  password              String?
  member_id             String?
  position_id           Int?
  department_id         Int?
  created_at            DateTime            @default(now())
  updated_at            DateTime?
  access_level_id       Int?
  membership_type       membership_type?
  asset_history         asset_history[]
  department_head       department[]
  event_attendance      event_attendance[]
  request               request[]
  access                access_level?       @relation(fields: [access_level_id], references: [id])
  position              position?           @relation(fields: [position_id], references: [id])
  department            user_departments?
  user_info             user_info?
  hod_user              request_approvals[] @relation("hod_user")
  ps_user               request_approvals[] @relation("ps_user")
  user_request_comments request_comments[]
  enrollments           enrollment[]
  parent_id             Int?
  parent                user?               @relation("UserParent", fields: [parent_id], references: [id])
  children              user[]              @relation("UserParent")
  status                status_type?
  is_sync               Boolean?          @default(false)
  sync_id               Int?
  mode                  classFormat?

  @@index([access_level_id], map: "user_access_level_id_fkey")
  @@index([position_id], map: "user_position_id_fkey")
}

model user_info {
  id                   Int                     @id @default(autoincrement())
  user_id              Int                     @unique
  title                String?
  date_of_birth        DateTime?
  gender               String
  primary_number       String?
  other_number         String?
  email                String?
  address              String?
  country              String?
  city                 String?
  state_region         String?
  occupation           String?
  company              String?
  member_since         DateTime?
  photo                String?
  emergency_contact_id Int?
  first_name           String?
  last_name            String?
  marital_status       marital_status?
  nationality          String?
  other_name           String?
  work_info_id         Int?
  country_code         String?
  emergency_contact    user_emergency_contact? @relation(fields: [emergency_contact_id], references: [id])
  user                 user                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  work_info            user_work_info?         @relation(fields: [work_info_id], references: [id])

  @@index([emergency_contact_id], map: "user_info_emergency_contact_id_fkey")
  @@index([work_info_id], map: "user_info_work_info_id_fkey")
}

model user_work_info {
  id                  Int         @id @default(autoincrement())
  name_of_institution String
  industry            String
  position            String
  user_info           user_info[]
  employment_status   String?
  school_name         String?
}

enum status_type {
  UNCONFIRMED
  CONFIRMED
}

model user_emergency_contact {
  id           Int         @id @default(autoincrement())
  name         String
  relation     String
  phone_number String
  user_info    user_info[]
}

model department {
  id                   Int                @id @default(autoincrement())
  name                 String
  department_head      Int?
  description          String?
  created_by           Int
  created_at           DateTime           @default(now())
  updated_by           Int?
  updated_at           DateTime?
  assets               assets[]
  department_head_info user?              @relation(fields: [department_head], references: [id])
  position             position[]
  request              request[]
  user_departments     user_departments[]
  is_sync               Boolean?          @default(false)
  sync_id               Int?

  @@index([department_head], map: "department_department_head_fkey")
}

model user_departments {
  id              Int         @id @default(autoincrement())
  user_id         Int         @unique
  department_id   Int?
  department_info department? @relation(fields: [department_id], references: [id])
  user            user        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([department_id], map: "user_departments_department_id_fkey")
}

model position {
  id            Int         @id @default(autoincrement())
  name          String
  department_id Int?
  description   String?
  created_by    Int
  created_at    DateTime    @default(now())
  updated_by    Int?
  updated_at    DateTime?
  department    department? @relation(fields: [department_id], references: [id])
  user          user[]
  is_sync               Boolean?          @default(false)
  sync_id               Int?

  @@index([department_id], map: "position_department_id_fkey")
}

model access_level {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  description    String?
  permissions    Json?
  created_by     Int?
  updated_by     Int?
  deleted_at     DateTime?
  deleted        Boolean   @default(false)
  created_at     DateTime? @default(now())
  updated_at     DateTime?
  users_assigned user[]
}

model assets {
  id                  Int           @id @default(autoincrement())
  name                String
  date_assigned       DateTime?
  date_purchased      DateTime?
  price               Float?
  description         String?
  updated_at          DateTime?
  supplier            String?
  status              asset_status?
  photo               String?
  created_by          Int?
  updated_by          Int?
  created_at          DateTime      @default(now())
  department_assigned Int?
  assigned_to         department?   @relation(fields: [department_assigned], references: [id])

  @@index([department_assigned], map: "assets_department_assigned_fkey")
}

model asset_history {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  status_update asset_status
  update_date   DateTime
  userId        Int?
  related_user  user?        @relation(fields: [userId], references: [id])

  @@index([userId], map: "asset_history_userId_fkey")
}

model event_mgt {
  id               Int                @id @default(autoincrement())
  name             String
  start_time       String?
  end_time         String?
  location         String?
  description      String?
  poster           String?
  qr_code          String?
  created_by       Int
  created_at       DateTime           @default(now())
  updated_by       Int?
  updated_at       DateTime?
  end_date         DateTime?
  start_date       DateTime?
  event_status     event_status?
  event_type       event_type?
  event_attendance event_attendance[]
  request          request[]
}

model event_attendance {
  id         Int       @id @default(autoincrement())
  event_id   Int
  user_id    Int
  created_at DateTime  @default(now())
  event      event_mgt @relation(fields: [event_id], references: [id])
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([event_id], map: "event_attendance_event_id_fkey")
  @@index([user_id], map: "event_attendance_user_id_fkey")
}

model request {
  id                      Int                   @id @default(autoincrement())
  request_id              String
  user_id                 Int
  event_id                Int
  department_id           Int
  request_approval_status RequestApprovalStatus
  requisition_date        DateTime
  currency                String
  attachmentsList         request_attachment[]
  department              department            @relation(fields: [department_id], references: [id])
  event                   event_mgt             @relation(fields: [event_id], references: [id])
  user                    user                  @relation(fields: [user_id], references: [id])
  request_approvals       request_approvals?
  products                requested_item[]      @relation("ProductRequest")
  user_sign               String?
  request_comments        request_comments[]

  @@index([user_id], map: "request_user_id_fkey")
  @@index([department_id], map: "request_department_id_fkey")
  @@index([event_id], map: "request_event_id_fkey")
}

model requisition_summary {
  requisition_id  Int      @unique
  user_id         Int
  generated_id    String
  product_names   Json
  date_created    DateTime
  approval_status String
  total_amount    Float?
  department_id   Int

  @@map("requisition_summary")
}

model request_comments {
  id         Int      @id @default(autoincrement())
  request_id Int?
  user_id    Int?
  comment    String?
  created_at DateTime @default(now())

  requesition          request? @relation(fields: [request_id], references: [id])
  request_comment_user user?    @relation(fields: [user_id], references: [id])

  @@index([request_id], map: "request_comments_request_id_fkey")
  @@index([user_id], map: "request_comments_user_id_fkey")
}

model request_attachment {
  id         Int      @id @default(autoincrement())
  URL        String
  request_id Int?
  request    request? @relation(fields: [request_id], references: [id])

  @@index([request_id], map: "attachment_request_id_fkey")
  @@map("attachment")
}

model requested_item {
  id         Int     @id @default(autoincrement())
  request_id Int
  name       String
  unitPrice  Float
  quantity   Int
  request    request @relation("ProductRequest", fields: [request_id], references: [id])

  @@index([request_id], map: "requested_product_item_request_id_fkey")
  @@map("requested_product_item")
}

model request_approvals {
  id                Int       @id @default(autoincrement())
  request_id        Int?      @unique
  hod_user_id       Int?
  hod_approved      Boolean   @default(false)
  hod_approval_date DateTime?
  hod_sign          String?
  ps_user_id        Int?
  ps_approved       Boolean   @default(false)
  ps_approval_date  DateTime?
  ps_sign           String?
  request           request?  @relation(fields: [request_id], references: [id])
  hod_user          user?     @relation("hod_user", fields: [hod_user_id], references: [id])
  ps_user           user?     @relation("ps_user", fields: [ps_user_id], references: [id])
}

model program {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  eligibility  Eligibility
  topics       topic[]
  cohorts      cohort[]  
  completed    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Define relation for prerequisites
  prerequisitePrograms program_prerequisites[] @relation("ProgramToPrerequisite")
  requiredForPrograms  program_prerequisites[] @relation("ProgramToRequired")
}

model program_prerequisites {
  programId        Int
  prerequisiteId   Int

  // Relations
  program        program @relation("ProgramToPrerequisite", fields: [programId], references: [id], onDelete: Cascade)
  prerequisite   program @relation("ProgramToRequired", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@id([programId, prerequisiteId])  // Composite Primary Key
}

model topic {
  id        Int       @id @default(autoincrement())
  name      String
  programId Int
  program   program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  progress  progress[]
}

model cohort {
  id                  Int        @id @default(autoincrement())
  name                String
  startDate           DateTime
  status              String
  description         String
  duration            String
  applicationDeadline DateTime
  programId           Int
  program             program    @relation(fields: [programId], references: [id], onDelete: Cascade)
  courses              course[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model course {
  id         Int      @id @default(autoincrement())
  name       String
  instructor String
  capacity   Int
  enrolled   Int      @default(0)
  schedule   String
  cohortId   Int
  classFormat classFormat? 
  location    String?
  meetingLink String?
  cohort     cohort   @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  enrollments enrollment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model enrollment {
  id         Int      @id @default(autoincrement())
  userId     Int?     // Nullable for non-users
  courseId   Int
  firstName  String
  lastName   String
  email      String
  phone      String
  user       user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())
  progress   progress[]

  @@unique([userId, courseId]) 
  @@unique([email, courseId])  
}

enum Eligibility {
  Both
  Members
  Non_Members
}

enum classFormat {
  In_Person 
  Online 
  Hybrid
}

model progress {
  id          Int       @id @default(autoincrement())
  enrollmentId Int      
  topicId     Int      
  score       Int      @default(0) // Score for the topic
  status      progress_status @default(PENDING)
  completedAt DateTime?  

  enrollment  enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  topic       topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, topicId])
}

enum progress_status {
  FAIL
  PASS
  PENDING
}

enum RequestApprovalStatus {
  Draft
  Awaiting_HOD_Approval
  Awaiting_Executive_Pastor_Approval
  APPROVED
  REJECTED
}

enum asset_status {
  ASSIGNED
  UNASSIGNED
  NOT_FIXABLE
  OUT_OF_REPAIRS
  LOST_OR_STOLEN
}

enum marital_status {
  SINGLE
  MARRIED
  DIVORCED
  WIDOW
  WIDOWER
}

enum membership_type {
  MEMBER
  VISITOR
}

enum event_type {
  ACTIVITY
  PROGRAM
  SERVICE
  OTHER
}

enum event_status {
  CONFIRMED
  TENTATIVE
}
